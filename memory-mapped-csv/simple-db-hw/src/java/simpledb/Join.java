package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    
    private JoinPredicate predicate;
    private DbIterator[] children;
    private Tuple current0;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.predicate = p;
        this.children = new DbIterator[2];
        this.children[0] = child1;
        this.children[1] = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return children[0].getTupleDesc().getFieldName(predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return children[1].getTupleDesc().getFieldName(predicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(children[0].getTupleDesc(), children[1].getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        children[0].open();
        children[1].open();
        if (children[0].hasNext()) current0 = children[0].next();
    }

    public void close() {
        super.close();
        children[0].close();
        children[1].close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        children[0].rewind();
        children[1].rewind();
        if (children[0].hasNext()) current0 = children[0].next();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	while (children[0].hasNext() || children[1].hasNext()) {
    		if (children[1].hasNext()) {
        		Tuple current1 = children[1].next();
        		if (passesFilter(current0, current1)) {
    	    		return joinTuples(current0, current1);
    	    	}
        	} else if (children[0].hasNext()) {
        		current0 = children[0].next();
    			children[1].rewind();
        	}
    	}
    	
    	return null;
    }
    
    private boolean passesFilter(Tuple t1, Tuple t2) {
    	if (t1 == null || t2 == null) return false;
    	return predicate.filter(t1, t2);
    }
    
    private Tuple joinTuples(Tuple first, Tuple second) {
    	Tuple tuple = new Tuple(getTupleDesc());
    	int index = 0;
    	
    	Iterator<Field> firstFields = first.fields();
    	while (firstFields.hasNext()) {
    		tuple.setField(index, firstFields.next());
    		index++;
    	}
    	
    	Iterator<Field> secondFields = second.fields();
    	while (secondFields.hasNext()) {
    		tuple.setField(index, secondFields.next());
    		index++;
    	}
    	
    	return tuple;
    }

    @Override
    public DbIterator[] getChildren() {
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.children[0] = children[0];
        this.children[1] = children[1];
    }

}
